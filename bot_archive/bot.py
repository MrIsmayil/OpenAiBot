import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from ai_model.model import AIModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ò–ò
ai_model = AIModel()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TrainStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_label = State()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ò–ò.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/predict <—Ç–µ–∫—Å—Ç> - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏\n"
        "/train_model - –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "/add_data - –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n"
        "/model_status - —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏\n"
        "/my_id - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π ID
@dp.message(Command("my_id"))
async def cmd_my_id(message: types.Message):
    await message.answer(f"–í–∞—à ID: {message.from_user.id}\n")
    
# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π ID
@dp.message(Command("my_id_full"))
async def cmd_my_id(message: types.Message):
    await message.answer(f"–í–∞—à ID: {message.from_user.id}\n"
                       f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {config.ADMIN_IDS}")
    
#Debug logs
@dp.message(Command("debug_model"))
async def cmd_debug_model(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    
    status = ai_model.get_status()
    training_data = ai_model.get_training_data()
    
    response = (
        f"–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏:\n"
        f"–û–±—É—á–µ–Ω–∞: {status['is_trained']}\n"
        f"–ö–ª–∞—Å—Å–æ–≤: {status['num_classes']}\n"
        f"–°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {status['vocab_size']}\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:\n"
    )
    
    for text, label in zip(training_data['texts'][:5], training_data['labels'][:5]):
        response += f"- '{text}' ‚Üí '{label}'\n"
    
    await message.answer(response)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏
@dp.message(Command("model_status"))
async def cmd_model_status(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    status = "–æ–±—É—á–µ–Ω–∞" if ai_model.is_trained else "–Ω–µ –æ–±—É—á–µ–Ω–∞"
    training_data = ai_model.get_training_data()
    await message.answer(
        f"–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {status}\n"
        f"–ü—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(training_data['texts'])}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫: {len(set(training_data.get('labels', [])))}"
    )

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏
@dp.message(Command("predict"))
async def cmd_predict(message: types.Message):
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /predict –≤–∞—à —Ç–µ–∫—Å—Ç")
        return
    
    text = text[1].strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    try:
        prediction = ai_model.predict(text)
        await message.answer(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è '{text}':\n\n{prediction}")
    except Exception as e:
        logger.exception(f"Prediction failed for text: {text}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
@dp.message(Command("add_data"))
async def cmd_add_data(message: types.Message, state: FSMContext):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await state.set_state(TrainStates.waiting_for_text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É:")

@dp.message(TrainStates.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(TrainStates.waiting_for_label)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:")

@dp.message(TrainStates.waiting_for_label)
async def process_label(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data['text']
    label = message.text
    
    ai_model.add_training_data(text, label)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∫–æ–π '{label}' –≤ –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É.")
    await state.clear()

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
@dp.message(Command("train_model"))
async def cmd_train_model(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    training_data = ai_model.get_training_data()
    
    await message.answer("–ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
    try:
        success = ai_model.train(training_data['texts'], training_data['labels'])
        if success:
            status = ai_model.get_status()
            await message.answer(
                "‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!\n"
                f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–≤: {len(training_data['texts'])}\n"
                f"‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {status['num_classes']}\n"
                f"‚Ä¢ –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {status['vocab_size']}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.exception("Training failed")
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")




# @dp.message(Command("train_model"))
# async def cmd_train_model(message: types.Message):
#     if message.from_user.id not in config.ADMIN_IDS:
#         await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
#         return
    
#     training_data = ai_model.get_training_data()
#     if len(training_data['texts']) < 10:
#         await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 –ø—Ä–∏–º–µ—Ä–æ–≤, —Å–µ–π—á–∞—Å {len(training_data['texts'])}.")
#         return
    
#     await message.answer("–ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
#     try:
#         success = ai_model.train(training_data['texts'], training_data['labels'])
#         if success:
#             status = ai_model.get_status()
#             await message.answer(
#                 f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!\n"
#                 f"–ö–ª–∞—Å—Å–æ–≤: {status['num_classes']}\n"
#                 f"–†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: {status['vocab_size']}"
#             )
#         else:
#             await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
#     except Exception as e:
#         logger.exception("Training failed")
#         await message.answer(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò)
@dp.message(F.text)
async def handle_text(message: types.Message):
    if not ai_model.is_trained:
        await message.answer("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return
    
    # –ü—Ä–æ—Å—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
    prediction = ai_model.predict(message.text)
    await message.answer(f"–Ø –¥—É–º–∞—é, —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {prediction}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())