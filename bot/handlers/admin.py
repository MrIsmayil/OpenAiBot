from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.keyboards import get_main_keyboard, get_exit_keyboard
from models.ai_model import AIModel
from core.config import config
import logging

logger = logging.getLogger(__name__)
admin_router = Router()
ai_model = AIModel()

class AddDataStates(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer = State()

@admin_router.message(F.text == "–û–±—É—á–µ–Ω–∏–µ")
async def train_model_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    await message.answer("–ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ...")
    if ai_model.train():
        await message.answer("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
async def add_data(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=get_exit_keyboard()
    )
    await state.set_state(AddDataStates.waiting_for_question)

@admin_router.message(AddDataStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    if message.text == "–í—ã—Ö–æ–¥":
        await state.clear()
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(True)
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    await state.update_data(question=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
        reply_markup=get_exit_keyboard()
    )
    await state.set_state(AddDataStates.waiting_for_answer)

@admin_router.message(AddDataStates.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext):
    if message.text == "–í—ã—Ö–æ–¥":
        await state.clear()
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(True)
        )
        return

    data = await state.get_data()
    ai_model.add_training_data(data['question'], message.text)
    await state.clear()
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
        reply_markup=get_main_keyboard(True)
    )

@admin_router.message(F.text == "–°—Ç–∞—Ç—É—Å")
async def model_status_handler(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
    status = ai_model.get_status()
    data = ai_model.load_data()
    
    response = (
        f"üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏:\n"
        f"‚Ä¢ –û–±—É—á–µ–Ω–∞: {'–î–∞' if status['is_trained'] else '–ù–µ—Ç'}\n"
        f"‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {status['num_classes']}\n"
        f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–≤: {len(data['texts'])}\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫: {len(set(data['labels']))}\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: {status['vocab_size']}"
    )
    await message.answer(response)